war {
    from "$buildDir/webapp"
}

def setGaeInfo(xml, appId, version) {
    xml.text = xml.text.replaceFirst('PROJECT', appId);
    xml.text = xml.text.replaceFirst('VERSION', version);
}

def generateXmlFromTemplate(path) {
    def template = file(path + ".template");
    def generated = file(path)
    generated.text = template.text
    setGaeInfo(generated, getAppId(), getVersionName());
}

task generateAppengineXmlFromTemplate() {
    def webInfDir = 'src/main/webapp/WEB-INF/'
    generateXmlFromTemplate(webInfDir + 'appengine-web.xml')
    generateXmlFromTemplate(webInfDir + 'queue.xml')
    generateXmlFromTemplate(webInfDir + 'cron.xml')
}

task cleanupAppengineGeneratedXml(type: Delete) {
    delete { webInfDir + 'appengine-web.xml' }
    delete { webInfDir + 'queue.xml' }
    delete { webInfDir + 'cron.xml' }
}
appengineUpdate.finalizedBy cleanupAppengineGeneratedXml

def appengineSharedResourceTasks = [appengineUpdateQueues, appengineUpdateIndexes, appengineUpdateCron]

appengineSharedResourceTasks.each {
    it.dependsOn generateAppengineXmlFromTemplate
    it.finalizedBy cleanupAppengineGeneratedXml
}

war.dependsOn generateAppengineXmlFromTemplate


