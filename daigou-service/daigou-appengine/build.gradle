apply from: "$rootDir/standard-java.gradle"
apply plugin: 'appengine'
apply plugin: 'war'
apply from: './appengine-web-xml-template.gradle'

buildscript {
    repositories {   // repositories for Jar's you access in your code
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.appengine:gradle-appengine-plugin:1.9.59'
    }
}

ext.webInfDir = "${projectDir}/src/main/webapp/WEB-INF"
ext.gaeVersion = getVersionName()
ext.gaeAppId = getAppId()

dependencies {
    compile project(':appengine-common')
    compile project(':common')
    compile project(':content-template')
    compile project(':wire-model')

    compile project(':daigou-service:content-parser')
    compile project(':daigou-service:lib-teddy')
    compile project(':daigou-service:lib-wx')

    testCompile junit
    testCompile hamcrest_all
    testCompile mockito_core
    testCompile google_appengine_api_labs
    testCompile google_appengine_api_stubs
    testCompile google_appengine_api_stubs
    testCompile google_appengine_tools_ask
}

appengine {
    appcfg {
        oauth2 = true
    }
}

project.afterEvaluate {
    // Don't run appengineRun unless you want it explicitly, since it will occupy port 8080 and won't release it.
    project.tasks.maybeCreate('appengineRun').onlyIf { return false }
}

def getPropertyOrDefault(propertyName, defaultValue) {
    if (project.hasProperty(propertyName) && project.getProperty(propertyName) instanceof String) {
        return project.getProperty(propertyName)
    }
    return defaultValue
}

def getAppId() {
    def appId = getPropertyOrDefault('gaeAppId', 'fluid-crane-200921')
    return appId
}

def getVersionName() {
    def username = System.getProperty('user.name').replaceAll('[^A-Za-z0-9]', '_')
    def version = getPropertyOrDefault('gaeVersion', username)
    if (version == null) {
        return username;
    }
    return version;
}

